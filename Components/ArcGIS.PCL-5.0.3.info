{"Name":"ArcGIS.PCL","Id":1442,"Alias":"ArcGIS.PCL","Description":"ArcGIS.PCL can be used to call ArcGIS Server resources, including those from Portal for ArcGIS and ArcGIS Online. The resources can be secure or unsecure and the ArcGIS Online token service and OAuth token service are supported.\n\nAvailable operations available are:\n\n - `CheckGenerateToken` - create a token automatically via an `ITokenProvider`\n - `Query\u003cT\u003e` - query a layer by attribute and / or spatial filters\n - `QueryForCount` - only return the number of results for the query operation\n - `QueryForIds` - only return the ObjectIds for the results of the query operation\n - `Find` - search across n layers and fields in a service\n - `ApplyEdits\u003cT\u003e` - post adds, updates and deletes to a feature service layer\n - `Geocode` - single line of input to perform a geocode usning a custom locator or the Esri world locator\n - `Suggest` - lightweight geocode operation that only returns text results, commonly used for predictive searching\n - `ReverseGeocode` - find location candidates for a input point location\n - `Simplify\u003cT\u003e` - alter geometries to be topologically consistent\n - `Project\u003cT\u003e` - convert geometries to a different spatial reference\n - `Buffer\u003cT\u003e` - buffers geometries by the distance requested\n - `DescribeSite` - returns a url for every service discovered\n - `Ping` - verify that the server can be accessed\n\nREST admin operations:\n\n  - `PublicKey` - admin operation to get public key used for encryption of token requests\n  - `ServiceStatus` - admin operation to get the configured and actual status of a service\n  - `ServiceReport` - admin operation to get the service report\n  - `StartService` - admin operation to start a service\n  - `StopService` - admin operation to stop a service\n\nIn addition to these you can use it to convert between GeoJSON and ArcGIS JSON features.\n\nTo get started with ArcGIS.PCL first create an ISerializer implementation. There is a Json.NET implementation packaged with the component that will be used by default if you initialise it\n\n### Json.NET ISerializer initialisation\n\n```csharp\nArcGIS.ServiceModel.Serializers.JsonDotNetSerializer.Init();\n\n```\n\nTo call ArcGIS Server resources you can create a gateway. You pass in the root url of the ArcGIS Server that you want to call operations against. There are a mixture of secure, non secure and ArcGIS Online base classes available.\n\n### ArcGIS Server gateway\n\n```csharp\n// ArcGIS Server with non secure resources\nvar gateway = new PortalGateway(\"http://sampleserver3.arcgisonline.com/ArcGIS/\");\n\n// ArcGIS Server with secure resources\nvar secureGateway = new SecurePortalGateway(\"http://serverapps10.esri.com/arcgis\", \"user1\", \"pass.word1\");\n\n// ArcGIS Server with secure resources and token service at different location\nvar otherSecureGateway = new PortalGateway(\"http://sampleserver3.arcgisonline.com/ArcGIS/\", tokenProvider: new TokenProvider(\"http://serverapps10.esri.com/arcgis\", \"user1\", \"pass.word1\"));\n\n// ArcGIS Online either secure or non secure\nvar arcgisOnlineGateway = new ArcGISOnlineGateway();\n\nvar secureArcGISOnlineGateway = new ArcGISOnlineGateway(tokenProvider: new ArcGISOnlineTokenProvider(\"user\", \"pass\"));\n\nvar secureArcGISOnlineGatewayOAuth = new ArcGISOnlineGateway(tokenProvider: new ArcGISOnlineAppLoginOAuthProvider(\"clientId\", \"clientSecret\"));\n```\n\nOnce you have a gateway you can call operations on it, for example to query an endpoint\n\n```csharp\nvar queryPoint = new Query(@\"Earthquakes/EarthquakesFromLastSevenDays/MapServer/0\".AsEndpoint());\n\nvar resultPoint = await gateway.Query\u003cPoint\u003e(queryPoint);\n```\n\n### Icon\n\nIcon made by [Freepik](http://www.freepik.com) from [www.flaticon.com](http://www.flaticon.com/free-icon/triangle-of-triangles_32915)\n","Version":"5.0.3","Summary":"Use ArcGIS Server REST types and resources without an official SDK. You can also convert between ArcGIS Features and GeoJSON.","QuickStart":"To get started with ArcGIS.PCL first create an ISerializer implementation. There is a Json.NET implementation packaged with the component that will be used by default if you initialise it\n\n### Json.NET ISerializer initialisation\n\n```csharp\nArcGIS.ServiceModel.Serializers.JsonDotNetSerializer.Init();\n```\nTo call ArcGIS Server resources you can create a gateway. There are a mixture of secure, non secure and ArcGIS Online base classes available.\n\n### ArcGIS Server gateway\n\n```csharp\n// ArcGIS Server with non secure resources\nvar gateway = new PortalGateway(\"http://sampleserver3.arcgisonline.com/ArcGIS/\");\n```\n\nOnce you have a gateway you can call operations on it, for example to query an endpoint\n\n```csharp\nvar queryPoint = new Query(@\"Earthquakes/EarthquakesFromLastSevenDays/MapServer/0\".AsEndpoint());\n\nvar resultPoint = await gateway.Query\u003cPoint\u003e(queryPoint);\n```\n","Hash":"1bab44783622eda0872150c0d12f4022","TargetPlatforms":["ios","android"],"TrialHash":null}